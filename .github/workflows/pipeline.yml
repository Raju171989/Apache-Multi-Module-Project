name: Install SonarQube, Prometheus, Grafana on AKS & Run UTs

on:
  schedule:
    - cron: '0 */12 * * *'  # Runs every 12 hours
  push:
    branches:
      - main
  workflow_dispatch:  # Manually trigger the workflow

jobs:
  install-and-test:
    runs-on: ubuntu-latest

    permissions:
      # Full permissions to all resources
      contents: read  # Read access to repository contents (code, issues, etc.)
      issues: write   # Allow writing issues
      pull-requests: write  # Allow creating pull requests
      actions: write   # Allow managing actions and workflows
      checks: write    # Allow write access to checks (for reporting statuses)
      deployments: write # Allow writing deployments
      statuses: write  # Allow status updates
      id-token: write
      # GitHub API permissions can be fully controlled with `repo` scope if required
      # Note: you may define more granular permissions here

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Verify Azure CLI installation
        run: az --version

      # Step 2: Set up Azure CLI
     # - name: Set up Azure CLI
       # uses: azure/setup-azurecli@v1
        #with:
          #azcliversion: '2.67.0'

      # Step 3: Azure Login
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          #username: ${{ secrets.AZURE_USERNAME }}
          #password: ${{ secrets.AZURE_PASSWORD }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          auth-type: 'SERVICE_PRINCIPAL'

      # Step 4: Get AKS credentials
      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_AKS_CLUSTER_NAME }}

      # Step 5: Set up Helm
      - name: Set up Helm
        uses: azure/setup-helm@v3

      # Step 6: Check if SonarQube is already installed, if not, install
      - name: Install SonarQube if not installed
        run: |
          if ! kubectl get deployment sonarqube --namespace monitoring; then
            echo "Installing SonarQube..."
            helm repo add sonarqube https://SonarSource.github.io/helm-chart-sonarqube
            helm repo update
            PASSWORD="Welcome"
            kubectl create namespace monitoring
            kubectl create secret generic sonarqube-password --from-literal=password=$PASSWORD --namespace monitoring
            helm install sonarqube sonarqube/sonarqube --namespace monitoring --set sonarqubePassword=$PASSWORD
          else
            echo "SonarQube is already installed."
          fi

      # Step 7: Check if Prometheus is already installed, if not, install
      - name: Install Prometheus if not installed
        run: |
          if ! kubectl get deployment prometheus-server --namespace monitoring; then
            echo "Installing Prometheus..."
            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
            helm repo update
            kubectl create secret generic prometheus-password --from-literal=password="Welcome" --namespace monitoring
            helm install prometheus prometheus-community/kube-prometheus-stack --namespace monitoring
          else
            echo "Prometheus is already installed."
          fi

      # Step 8: Check if Grafana is already installed, if not, install
      - name: Install Grafana if not installed
        run: |
          if ! kubectl get deployment grafana --namespace monitoring; then
            echo "Installing Grafana..."
            helm repo add grafana https://grafana.github.io/helm-charts
            helm repo update
            kubectl create secret generic grafana-password --from-literal=password="Welcome" --namespace monitoring
            helm install grafana grafana/grafana --namespace monitoring --set adminPassword="Welcome"
          else
            echo "Grafana is already installed."
          fi

      # Step 9: Expose services if not already exposed
      - name: Expose services
        run: |
          kubectl expose deployment sonarqube --type=LoadBalancer --name=sonarqube-lb --namespace monitoring || echo "SonarQube service already exposed"
          kubectl expose deployment prometheus-server --type=LoadBalancer --name=prometheus-lb --namespace monitoring || echo "Prometheus service already exposed"
          kubectl expose deployment grafana --type=LoadBalancer --name=grafana-lb --namespace monitoring || echo "Grafana service already exposed"

      # Step 10: Get the URLs of the services and send an email
      - name: Get service URLs and send email
        run: |
          SONARQUBE_URL=$(kubectl get svc sonarqube-lb --namespace monitoring --output=jsonpath='{.status.loadBalancer.ingress[0].ip}')
          PROMETHEUS_URL=$(kubectl get svc prometheus-lb --namespace monitoring --output=jsonpath='{.status.loadBalancer.ingress[0].ip}')
          GRAFANA_URL=$(kubectl get svc grafana-lb --namespace monitoring --output=jsonpath='{.status.loadBalancer.ingress[0].ip}')

          echo "SonarQube URL: $SONARQUBE_URL"
          echo "Prometheus URL: $PROMETHEUS_URL"
          echo "Grafana URL: $GRAFANA_URL"
          
          # Send an email with the URLs (Configure your email sending tool in GitHub secrets)
          curl -X POST -H "Content-Type: application/json" \
            -d '{"to": "your-email@example.com", "subject": "SonarQube, Prometheus, and Grafana Deployed", "body": "SonarQube: $SONARQUBE_URL, Prometheus: $PROMETHEUS_URL, Grafana: $GRAFANA_URL"}' \
            ${{ secrets.EMAIL_API_URL }}  # You can use an API like SendGrid or any SMTP API

      # Step 11: Run Unit Tests and Collect Coverage
      - name: Run Unit Tests and Collect Coverage
        run: |
          # Install Maven (required for Java projects)
          sudo apt-get install -y maven

          # Run tests with Maven (JUnit) and JaCoCo for code coverage
          mvn clean test jacoco:report

          # Save the coverage report
          mvn jacoco:report

      # Step 12: Upload code coverage to SonarQube
      - name: Upload Coverage to SonarQube
        run: |
          sonar-scanner -Dsonar.projectKey=Apache-Project \
                        -Dsonar.sources=./src \
                        -Dsonar.java.binaries=target/classes \
                        -Dsonar.host.url=http://$SONARQUBE_URL \
                        -Dsonar.login=$SONARQUBE_TOKEN

      # Step 13: Record Execution Time for Unit Tests
      - name: Record UT Execution Time
        run: |
          START_TIME=$(date +%s)
          mvn clean test
          END_TIME=$(date +%s)
          EXECUTION_TIME=$((END_TIME - START_TIME))
          echo "Unit Tests execution time: $EXECUTION_TIME seconds"

      # Step 14: Update Grafana Dashboard with Coverage and Execution Time
      - name: Update Grafana Dashboard
        run: |
          # Configure Grafana to display code coverage and execution time trends
          # Example: Use Prometheus data sources in Grafana to visualize coverage over time
          curl -X POST -H "Content-Type: application/json" \
            -d '{"dashboard": {"title": "Unit Test Metrics", "panels": [{"title": "Test Coverage", "targets": [{"expr": "sum(test_coverage)"}]}]}}' \
            http://$GRAFANA_URL/api/dashboards/db

      # Step 15: Send email with test results
      - name: Send email with test results
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '{"to": "your-email@example.com", "subject": "Unit Test Results", "body": "Unit Tests completed in $EXECUTION_TIME seconds, coverage report available at $SONARQUBE_URL"}' \
            ${{ secrets.EMAIL_API_URL }}
